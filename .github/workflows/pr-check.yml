name: PR Check - API

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'

jobs:
  test-and-build:
    name: Test and Build Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Run tests
        working-directory: ./backend
        run: go test -v ./...

      - name: Build check
        working-directory: ./backend
        run: |
          docker build -t test-build .

      - name: Security scan
        working-directory: ./backend
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Go mod tidy check
        working-directory: ./backend
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Go format check
        working-directory: ./backend
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go files must be formatted with gofmt:"
            gofmt -s -l .
            exit 1
          fi

      - name: Comment PR
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🔍 API Build Check')
            );
            
            const status = '${{ job.status }}';
            const commentBody = status === 'success' 
              ? '🔍 API Build Check\n\n✅ ビルドとテストが正常に完了しました！\n\n- ✅ テスト実行\n- ✅ Dockerビルド\n- ✅ セキュリティスキャン\n- ✅ フォーマットチェック'
              : '🔍 API Build Check\n\n❌ ビルドまたはテストでエラーが発生しました。\n\n詳細はActionsログを確認してください。';
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }